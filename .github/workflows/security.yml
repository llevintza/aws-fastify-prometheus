name: Security Analysis

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    # Run security scan weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run npm audit
        run: |
          echo "Running npm security audit..."
          yarn audit --json > audit-report.json || echo "Audit completed with findings"
          yarn audit || echo "Audit found issues (this is normal)"

      - name: Run additional audit checks
        run: |
          echo "Running additional security checks..."
          # Check for yarn audit (if Yarn v1)
          yarn_version=$(yarn --version)
          echo "Yarn version: $yarn_version"
          
          if [[ "$yarn_version" =~ ^1\. ]]; then
            echo "Running Yarn v1 native audit..."
            yarn audit --level moderate --json > yarn-audit-report.json || true
          else
            echo "Yarn v2+ detected. npm audit already covers vulnerability scanning."
          fi

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        continue-on-error: true
        with:
          config: >-
            p/security-audit
            p/secrets
            p/javascript
            p/typescript
            p/nodejs

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Analyze security report
        run: |
          echo "Analyzing security reports..."
          
          # Check yarn audit results
          if [ -f "audit-report.json" ]; then
            echo "Checking yarn audit results..."
            vulnerabilities=$(wc -l < audit-report.json 2>/dev/null || echo "0")
            echo "Found $vulnerabilities vulnerability entries in yarn audit"
            
            if [ "$vulnerabilities" -gt "0" ]; then
              echo "⚠️ Security vulnerabilities found. Details:"
              echo "================================================"
              
              # Parse each vulnerability properly
              while IFS= read -r line; do
                if [ -n "$line" ]; then
                  echo "🔍 Analyzing vulnerability..."
                  package=$(echo "$line" | jq -r '.value // "Unknown"' 2>/dev/null)
                  issue=$(echo "$line" | jq -r '.children.Issue // "Unknown issue"' 2>/dev/null)
                  severity=$(echo "$line" | jq -r '.children.Severity // "Unknown"' 2>/dev/null)
                  version=$(echo "$line" | jq -r '.children["Vulnerable Versions"] // "Unknown"' 2>/dev/null)
                  dependents=$(echo "$line" | jq -r '.children.Dependents[]? // "Unknown"' 2>/dev/null)
                  
                  echo "📦 Package: $package"
                  echo "🚨 Severity: $severity"
                  echo "📄 Issue: $issue"
                  echo "🔢 Vulnerable Version: $version"
                  echo "📋 Used by: $dependents"
                  echo "------------------------------------------------"
                fi
              done < audit-report.json
              
              echo ""
              echo "💡 RECOMMENDATIONS:"
              echo "1. Check if these are direct dependencies in package.json"
              echo "2. Update packages with: yarn upgrade"
              echo "3. For transitive deps, update the parent packages"
              echo "4. Consider using 'yarn why <package>' to trace dependency paths"
            else
              echo "✅ No vulnerabilities found in yarn audit"
            fi
          else
            echo "No audit report found"
          fi

      - name: Generate security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CODE_QUALITY_REPORT_TOKEN }}
          script: |
            const fs = require('fs');
            let summary = '## 🔒 Security Analysis Summary\n\n';
            
            // yarn audit results (Yarn v2+ format)
            if (fs.existsSync('audit-report.json')) {
              try {
                const auditContent = fs.readFileSync('audit-report.json', 'utf8');
                const auditLines = auditContent.trim().split('\n').filter(line => line.trim());
                const vulnCount = auditLines.length;
                
                summary += '### 🛡️ Dependency Vulnerabilities\n';
                summary += `- **yarn audit**: ${vulnCount} vulnerability entries found\n\n`;
                
                if (vulnCount > 0) {
                  summary += '⚠️ **Vulnerabilities detected - please review:**\n\n';
                  
                  // Parse and display vulnerabilities properly
                  auditLines.slice(0, 5).forEach((line, index) => {
                    try {
                      const vuln = JSON.parse(line);
                      const pkg = vuln.value || 'Unknown package';
                      const issue = vuln.children?.Issue || 'Unknown issue';
                      const severity = vuln.children?.Severity || 'Unknown';
                      const version = vuln.children?.['Vulnerable Versions'] || 'Unknown';
                      const dependents = vuln.children?.Dependents?.join(', ') || 'Unknown';
                      
                      summary += `#### ${index + 1}. 📦 \`${pkg}\` (${severity})\n`;
                      summary += `- **Issue**: ${issue}\n`;
                      summary += `- **Vulnerable Version**: \`${version}\`\n`;
                      summary += `- **Used by**: ${dependents}\n\n`;
                    } catch (e) {
                      summary += `#### ${index + 1}. Raw entry\n\`\`\`\n${line.substring(0, 200)}...\n\`\`\`\n\n`;
                    }
                  });
                  
                  if (vulnCount > 5) {
                    summary += `*... and ${vulnCount - 5} more vulnerabilities*\n\n`;
                  }
                  
                  summary += '### 💡 Recommended Actions:\n';
                  summary += '1. Run `yarn upgrade` to update packages\n';
                  summary += '2. Use `yarn why <package>` to trace dependency paths\n';
                  summary += '3. Consider updating parent packages for transitive dependencies\n';
                  summary += '4. Check if any direct dependencies can be updated in package.json\n\n';
                } else {
                  summary += '✅ **No vulnerabilities found**\n';
                }
              } catch (e) {
                summary += '### 🛡️ Dependency Vulnerabilities\n❌ Could not parse audit report\n';
              }
            } else {
              summary += '### 🛡️ Dependency Vulnerabilities\n❌ No audit report found\n';
            }
            
            summary += '\n### 🔍 Additional Security Checks\n';
            summary += '- ✅ CodeQL static analysis completed\n';
            summary += '- ✅ Semgrep security rules applied\n';
            summary += '- ✅ Secret scanning performed\n\n';
            
            summary += '---\n*Generated by Security Analysis workflow*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            audit-report.json
            yarn-audit-report.json
          retention-days: 30
